
# 负载均和客户端配置
ribbon:
    eureka:
     enabled: false
    httpclient:
        enabled: true
#    restclient:   # 有重试机制
#        enabled: true
#    okhttp:
#      enabled: true

# Gateway配置
zuul:
    stripPrefix: false
    forceOriginalQueryStringEncoding: true
    addProxyHeaders: true
    addHostHeader: true
    sensitiveHeaders:
    sslHostnameValidationEnabled: false
    ribbonIsolationStrategy: THREAD
    traceRequestBody: true
    ignoredServices: '*'
#    semaphore:
#        maxSemaphores: 500
    threadPool:
        useSeparateThreadPools: true
        threadPoolKeyPrefix: zuulthreadPool
    ribbon:  # 启动时初始化ribbon负载均衡
        eager-load:
            enabled: true
    routes:  # 配置路由
        first_service:
            stripPrefix: false
            retryable: false
            path: /pweb/**
            customSensitiveHeaders: false
            serviceId: AlipayFastLoanSubmit.do
            sessionType: IP_HASH
            ruleMatcher: false
            servicePattern: (?<field1>.*)/(?<field2>.*$)
            routePattern: /${field1}/${field2}
        second_service:
            stripPrefix: false
            retryable: false
            path: /second/**
            customSensitiveHeaders: false
            serviceId: second_service
            sessionType: COOKIE
            cookieName: second_service
            cookieExpires: 86400
            ruleMatcher: false
            servicePattern: (?<field1>.*)/(?<field2>.*$)
            routePattern: /${field1}/${field2}
        third_service:
            stripPrefix: false
            retryable: false
            path: /third/**
            customSensitiveHeaders: false
            serviceId: third_service
            sessionType: NONE
            ruleMatcher: false
            servicePattern: (?<field1>.*)/(?<field2>.*$)
            routePattern: /${field1}/${field2}
#    host:   # SimpleHostRoutingFilter配置转发客户端的超时时间
#        maxTotalConnections: 500     # T he maximum number of total connections the proxy can hold open to backends.
#        maxPerRouteConnections: 50   # The maximum number of connections that can be used by a single route.
#        socketTimeoutMillis: 50000   # The socket timeout in millis. Defaults to 50000.
#        connectTimeoutMillis: 5000   # The connection timeout in millis. Defaults to 2000.

    ratelimit:
        enabled: true #default false
        behind-proxy: true #default false
        policies:
            first_service:  # default policy
                limit: 2
                refresh-interval: 1 #default value (in seconds)
                type: url  #optional  - user  - origin  - url   if url
                ignored-Patterns: '*'
                sub-policies:
                    first_service_urlpolicies1:
                        limit: 200
                        refresh-interval: 30 #default value (in seconds)
                        type: url
                        urlRuleMatcher : /first/test*
                    first_service_urlpolicies2:
                        limit: 200
                        type: url
                        refresh-interval: 1 #default value (in seconds)
                        urlRuleMatcher : /first/abc*/**



# 负载均衡配置
first_service:
    ribbon:
        listOfServers: 11.115.0.18:23003,11.115.0.19:23003
        # Max number of retries
        MaxAutoRetries: 0
        # Max number of next servers to retry (excluding the first server)
        MaxAutoRetriesNextServer: 0
        # Whether all operations can be retried for this client
        OkToRetryOnAllOperations: false
        ReceiveBufferSize: 4096
        # 长连接配置
        EnableConnectionPool: true
        PoolKeepAliveTimeUnits: 100
        PoolKeepAliveTime: 100
        PoolMinThreads: 100
        PoolMaxThreads: 100
        # 配置连接数
        MaxConnectionsPerHost: 100
        MaxTotalConnections: 1000
        # 配置连接时间
        ConnectTimeout: 1000
        ReadTimeout: 10000
        # 配置数据压缩
        GZipPayload: true
        # 配置负载均和策略及规则
        NFLoadBalancerClassName: com.netflix.loadbalancer.DynamicServerListLoadBalancer
        NFLoadBalancerRuleClassName: com.ucash.gateway.ribbon.IPHashRule
        NFLoadBalancerPingClassName: com.ucash.gateway.ribbon.CustomPing
        NFLoadBalancerPingInterval: 15
        # Interval to refresh the server list from the source
        ServerListRefreshInterval: 60000

second_service:
    ribbon:
        listOfServers: 127.0.0.1:8090,127.0.0.1:8091
        # Max number of retries
        MaxAutoRetries: 0
        # Max number of next servers to retry (excluding the first server)
        MaxAutoRetriesNextServer: 0
        # Whether all operations can be retried for this client
        OkToRetryOnAllOperations: false

        ReceiveBufferSize: 4096

        EnableConnectionPool: true
        PoolKeepAliveTimeUnits: 300
        PoolKeepAliveTime: 300
        PoolMinThreads: 300
        PoolMaxThreads: 300

        MaxConnectionsPerHost: 300
        MaxTotalConnections: 3000

        ConnectTimeout: 3000
        ReadTimeout: 10000

        GZipPayload: true

        NFLoadBalancerClassName: com.netflix.loadbalancer.DynamicServerListLoadBalancer
        NFLoadBalancerRuleClassName: com.ucash.gateway.ribbon.CookieRule
        NFLoadBalancerPingClassName: com.ucash.gateway.ribbon.CustomPing
        NFLoadBalancerPingInterval: 15
        # Interval to refresh the server list from the source
        ServerListRefreshInterval: 60000
third_service:
    ribbon:
        listOfServers: 127.0.0.1:8090,127.0.0.1:8091
        NFLoadBalancerPingClassName: com.ucash.gateway.ribbon.CustomPing
        NFLoadBalancerPingInterval: 10
        ServerListRefreshInterval: 60000

##timeout config
hystrix:
    command:
        default:
            execution:
                timeout:
                    enabled: true
                isolation:
                    thread:
                        timeoutInMilliseconds: 6000
        first_service:
            execution:
                isolation:
                    strategy: THREAD
                    thread:
                        timeoutInMilliseconds: 10000 # This property sets the time in milliseconds after which the caller will observe a timeout and walk away from the command execution. Hystrix marks the HystrixCommand as a TIMEOUT, and performs fallback logic. Note that there is configuration for turning off timeouts per-command, if that is desired (see command.timeout.enabled).
                timeout:
                    enabled: true
            circuitBreaker:
                enabled: true
                requestVolumeThreshold: 20        # 熔断器在整个统计时间内是否开启的阀值，默认20秒。也就是10秒钟内至少请求20次，熔断器才发挥起作用
                sleepWindowInMilliseconds: 50000  # 熔断器默认工作时间,默认:5秒.熔断器中断请求5秒后会进入半打开状态,放部分流量过去重试
                errorThresholdPercentage: 50      # 默认:50%。当出错率超过50%后熔断器启动.
            metrics:
                rollingStats:
                    timeInMilliseconds: 5000  # 设置统计滚动窗口的长度，以毫秒为单位。用于监控和熔断器。
                    numBuckets: 10 # 滚动窗口被分隔成桶(bucket)，并且进行滚动。 例如这个属性设置10s(10000)，一个桶是1s。timeInMilliseconds必须能被这个值整除
                rollingPercentile:
                    enabled: true  # 设置执行时间是否被跟踪，并且计算各个百分比，50%,90%等的时间
                    timeInMilliseconds: 60000  # 设置执行时间在滚动窗口中保留时间，用来计算百分比
                    numBuckets: 6 # 设置rollingPercentile窗口的桶数量
                    bucketSize: 100 # 此属性设置每个桶保存的执行时间的最大值.如果设置为100，但是有500次求情，则只会计算最近的100次
                healthSnapshot:
                    intervalInMilliseconds: 200 # 采样时间间隔
            requestCache:
                enabled: true  # 设置是否缓存请求，request-scope内缓存
            requestLog:
                enabled: false #true  # 设置HystrixCommand执行和事件是否打印到HystrixRequestLog中
            coreSize: 10 #     设置线程池的core size,这是最大的并发执行数量 设置标准：coreSize = requests per second at peak when healthy × 99th percentile latency in seconds + some breathing room 大多数情况下默认的10个线程都是值得建议的
            maxQueueSize: -1 # 最大队列长度。设置BlockingQueue的最大长度, 默认值：-1 如果使用正数，队列将从SynchronousQueue改为LinkedBlockingQueue
            queueSizeRejectionThreshold: 5 # 设置拒绝请求的临界值
            keepAliveTimeMinutes: 1 # 设置keep-live时间 这个一般用不到因为默认corePoolSize和maxPoolSize是一样的
        second_service:
            execution:
                isolation:
                    strategy: THREAD
                    thread:
                        timeoutInMilliseconds: 10000 # This property sets the time in milliseconds after which the caller will observe a timeout and walk away from the command execution. Hystrix marks the HystrixCommand as a TIMEOUT, and performs fallback logic. Note that there is configuration for turning off timeouts per-command, if that is desired (see command.timeout.enabled).
                timeout:
                    enabled: true
            circuitBreaker:
                enabled: true
                requestVolumeThreshold: 20       # 熔断器在整个统计时间内是否开启的阀值，默认20秒。也就是10秒钟内至少请求20次，熔断器才发挥起作用
                sleepWindowInMilliseconds: 50000  # 熔断器默认工作时间,默认:5秒.熔断器中断请求5秒后会进入半打开状态,放部分流量过去重试
                errorThresholdPercentage: 50     # 默认:50%。当出错率超过50%后熔断器启动.
            metrics:
                rollingStats:
                    timeInMilliseconds: 5000  # 设置统计滚动窗口的长度，以毫秒为单位。用于监控和熔断器。
                    numBuckets: 10 # 滚动窗口被分隔成桶(bucket)，并且进行滚动。 例如这个属性设置10s(10000)，一个桶是1s。timeInMilliseconds必须能被这个值整除
                rollingPercentile:
                    enabled: true  # 设置执行时间是否被跟踪，并且计算各个百分比，50%,90%等的时间
                    timeInMilliseconds: 60000  # 设置执行时间在滚动窗口中保留时间，用来计算百分比
                    numBuckets: 6 # 设置rollingPercentile窗口的桶数量
                    bucketSize: 100 # 此属性设置每个桶保存的执行时间的最大值.如果设置为100，但是有500次求情，则只会计算最近的100次
                healthSnapshot:
                    intervalInMilliseconds: 200 # 采样时间间隔
            requestCache:
                enabled: true  # 设置是否缓存请求，request-scope内缓存
            requestLog:
                enabled: false #true  # 设置HystrixCommand执行和事件是否打印到HystrixRequestLog中
            coreSize: 10 #     设置线程池的core size,这是最大的并发执行数量 设置标准：coreSize = requests per second at peak when healthy × 99th percentile latency in seconds + some breathing room 大多数情况下默认的10个线程都是值得建议的
            maxQueueSize: -1 # 最大队列长度。设置BlockingQueue的最大长度, 默认值：-1 如果使用正数，队列将从SynchronousQueue改为LinkedBlockingQueue
            queueSizeRejectionThreshold: 5 # 设置拒绝请求的临界值
            keepAliveTimeMinutes: 1 # 设置keep-live时间 这个一般用不到因为默认corePoolSize和maxPoolSize是一样的
